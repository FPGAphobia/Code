module sixdigital(
     input clk,
	  input areset,
	  output reg [7:0] led,
	  output reg [5:0] select
);
     	  
	  parameter p0 = 8'b00000011;
	  parameter p1 = 8'b10011111; 
	  parameter p2 = 8'b00100101;
	  parameter p3 = 8'b00001101;
	  parameter p4 = 8'b10011001;
	  parameter p5 = 8'b01001001;
	  parameter p6 = 8'b01000001;
	  parameter p7 = 8'b00011111;
	  parameter p8 = 8'b00000001;
	  parameter p9 = 8'b00001001;
	  
	  reg [31:0] timer1, timer2;
	  reg [47:0] light;
	  reg [3:0] second;
	  
	  always @ (posedge clk or negedge areset) begin
	        if (~areset)
			        timer1 <= 0;
			  else if (timer1 == 32'd499999999)
			        timer1 <= 0;
			  else
			        timer1 <= timer1 + 1'b1;
	  end
	  
	  always @(posedge clk or negedge areset) begin
	        if (~areset)
			        second <= 0;
			  else
	        case (timer1)
			        32'd49999999 : second <= 4'd1;
					  32'd99999999 : second <= 4'd2;
					  32'd149999999 : second <= 4'd3;
					  32'd199999999 : second <= 4'd4;
					  32'd249999999 : second <= 4'd5;
					  32'd299999999 : second <= 4'd6;
					  32'd349999999 : second <= 4'd7;
					  32'd399999999 : second <= 4'd8;
					  32'd449999999 : second <= 4'd9;
					  32'd499999999 : second <= 4'd10;
			  endcase
	   end
	  
	  always @ (posedge clk or negedge areset) begin
	        if (~areset)
			        timer2 <= 0;
			  else if (timer2 == 32'd299999)
			        timer2 <= 0;
			  else
			        timer2 <= timer2 + 1'b1;
	  end
	  
	  always @ (posedge clk or negedge areset) begin
	        if (~areset)
			        light <= {p0, p0, p0, p0, p0, p0};
			  else begin
			      case (second)
					  'd1: light <= {p5, p6, p7, p8, p9, p0};
					  'd2: light <= {p6, p7, p8, p9, p0, p1};
					  'd3: light <= {p7, p8, p9, p0, p1, p2};
					  'd4: light <= {p8, p9, p0, p1, p2, p3};
					  'd5: light <= {p9, p0, p1, p2, p3, p4};
					  'd6: light <= {p0, p1, p2, p3, p4, p5};
					  'd7: light <= {p1, p2, p3, p4, p5, p6};
					  'd8: light <= {p2, p3, p4, p5, p6, p7};
					  'd9: light <= {p3, p4, p5, p6, p7, p8};
					  'd10: light <= {p4, p5, p6, p7, p8, p9};
					endcase    
			  end
	  end
	  
	  always @ (posedge clk or negedge areset) begin
	        if (~areset)
			        led <= p0;
			  else begin
			      case (select)
					   6'b011111: led <= light[7:0];
						6'b101111: led <= light[15:8];
						6'b110111: led <= light[23:16];
						6'b111011: led <= light[31:24];
						6'b111101: led <= light[39:32];
						6'b111110: led <= light[47:40];
					endcase
			  end
	  end
	  
	  always @ (posedge clk or negedge areset) begin
	        if (~areset)
			        select <= 6'd111111;
			  else
	        case (timer2)
			        32'd49999 : select <= 6'b011111;
					  32'd99999 : select <= 6'b101111;
					  32'd149999 : select <= 6'b110111;
					  32'd199999 : select <= 6'b111011;
					  32'd249999 : select <= 6'b111101;
					  32'd299999 : select <= 6'b111110;
				endcase	  
	  end
	  
endmodule
